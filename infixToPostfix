Scan the symbols of the expression from left to right, and for each symbol:

a. If the symbol is an operand:
Print that symbol onto the screen.

b. If the symbol is a left parenthesis:
Push it onto the stack.

c. If the symbol is a right parenthesis:
Pop all the operators from the stack up to the first left parenthesis and print them on the screen.

Discard the left and right parentheses.

d. If the symbol is an operator:
If the precedence of the operators in the stack is greater than or equal to the current operator:

Pop the operators from the stack, print them, and then push the current operator.

Else:

Push the current operator onto the stack.

import java.util.*;

public class InfixToPostfix {

    // Helper to check if character is an operator
    private static boolean isOperator(char ch) {
        return ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^';
    }

    // Define precedence
    private static int precedence(char op) {
        switch (op) {
            case '^': return 3;
            case '*':
            case '/': return 2;
            case '+':
            case '-': return 1;
            default: return -1;
        }
    }

    // Infix to Postfix conversion function
    public static String infixToPostfix(String expression) {
        StringBuilder result = new StringBuilder();
        Stack<Character> stack = new Stack<>();

        for (char ch : expression.toCharArray()) {
            if (Character.isLetterOrDigit(ch)) {
                result.append(ch); // a. Operand → append to output
            } else if (ch == '(') {
                stack.push(ch);   // b. Left parenthesis → push to stack
            } else if (ch == ')') {
                // c. Right parenthesis → pop until left parenthesis
                while (!stack.isEmpty() && stack.peek() != '(') {
                    result.append(stack.pop());
                }
                stack.pop(); // discard '('
            } else if (isOperator(ch)) {
                // d. Operator → manage precedence
                while (!stack.isEmpty() && precedence(stack.peek()) >= precedence(ch)) {
                    result.append(stack.pop());
                }
                stack.push(ch);
            }
        }

        // Pop remaining operators
        while (!stack.isEmpty()) {
            result.append(stack.pop());
        }

        return result.toString();
    }

    public static void main(String[] args) {
        String infix = "a+(b*c-(d/e^f)*g)*h";
        String postfix = infixToPostfix(infix);
        System.out.println("Infix: " + infix);
        System.out.println("Postfix: " + postfix);
    }
}
